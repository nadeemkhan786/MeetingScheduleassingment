package meetingschedulingsystem;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;


public class SaveLoadMenu extends javax.swing.JDialog {
    
    /**
     * Creates new form SaveLoadMenu
     */
    public SaveLoadMenu(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initSettings();
    }
    
    private void initSettings() {
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        this.setResizable(false);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }
    
    private void showFailLoadDialog() {
        JOptionPane.showMessageDialog(this, "Failed to load file.", "Load", JOptionPane.ERROR_MESSAGE);
    }
    
    private void showSaveSuccess(String filename) {
        JOptionPane.showMessageDialog(this, 
                "File saved: "+filename, 
                "Save", 
                JOptionPane.PLAIN_MESSAGE);
    }
    
    private void showLoadSuccess(String filename) {
        JOptionPane.showMessageDialog(this, 
                "File loaded: "+filename, 
                "Load", 
                JOptionPane.PLAIN_MESSAGE);
    }
    
    private void showFailSaveDialog() {
        JOptionPane.showMessageDialog(this, "Failed to save file.", "Save fail", JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loadButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        loadButton.setText("Load file");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        
        
        JFileChooser fc = new JFileChooser();
        
        int returnVal = fc.showOpenDialog(loadButton);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            // Read from disk using FileInputStream
            FileInputStream f_in;
            try {
                f_in = new FileInputStream(file);
            } catch (FileNotFoundException ex) {
                showFailLoadDialog();
                Logger.getLogger(SaveLoadMenu.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            
            // Read object using ObjectInputStream
            ObjectInputStream obj_in;
            try {
                obj_in = new ObjectInputStream (f_in);
            } catch (IOException ex) {
                showFailLoadDialog();
                Logger.getLogger(SaveLoadMenu.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }

            // Read an object
            Object obj = new Object();
            try {
                obj = obj_in.readObject();
            } catch (IOException | ClassNotFoundException ex) {
                showFailLoadDialog();
                Logger.getLogger(SaveLoadMenu.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (obj instanceof MeetingDataFile)
            {
                MeetingDataFile dat = (MeetingDataFile) obj;
                DataManager.clear();
                DataManager.init(dat.getRooms(), dat.getPeople(), dat.getMeetings());
                showLoadSuccess(file.getName());
                return;
            }
            showFailLoadDialog();
        } else { // canceled file select
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        JFileChooser fc = new JFileChooser();
        
        int returnVal = fc.showSaveDialog(saveButton);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String savepath = file.getPath()+".meet";
            //This is where a real application would save the file.
            // Write to disk with FileOutputStream
            FileOutputStream f_out;
            try {
                f_out = new FileOutputStream(savepath);
            } catch (FileNotFoundException ex) {
                showFailSaveDialog();
                Logger.getLogger(SaveLoadMenu.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }

            // Write object with ObjectOutputStream
            ObjectOutputStream obj_out;
            try {
                obj_out = new ObjectOutputStream (f_out);
            } catch (IOException ex) {
                showFailSaveDialog();
                Logger.getLogger(SaveLoadMenu.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            // get data
            MeetingDataFile alldata = new MeetingDataFile(
                    DataManager.getRooms(), 
                    DataManager.getPeople(), 
                    DataManager.getMeetings());
            
            try {
                // write to file
                obj_out.writeObject ( alldata );
                showSaveSuccess(file.getName()+".meet");
            } catch (IOException ex) {
                showFailSaveDialog();
                Logger.getLogger(SaveLoadMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
        }
    }//GEN-LAST:event_saveButtonActionPerformed
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton loadButton;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
